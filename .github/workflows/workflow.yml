name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Ensure Directory Exists and Build Docker Images
        run: |
          if [ ! -d "./createPost" ]; then
            echo "⚠️ Directory createPost not found! Creating it..."
            mkdir -p createPost
          fi
          cd createPost || { echo "❌ Failed to enter directory createPost"; exit 1; }

          if [ ! -f "./Dockerfile" ]; then
            echo "❌ Dockerfile not found in createPost directory!"
            exit 1
          fi

          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:latest .
          for service in "createpost" "getpost" "updatepost" "deletepost"; do
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/app:latest ${{ secrets.DOCKERHUB_USERNAME }}/app:$service-latest
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:$service-latest
          done

  deploy_ec2:
    name: Deploy on EC2
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Verify SSH Connection
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "echo 'SSH Connection Successful'"

      - name: Copy docker-compose.yml to EC2
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.yml ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/app/docker-compose.yml

      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DYNAMODB_TABLE: ${{ secrets.DYNAMODB_TABLE }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            echo "Checking if project directory exists..."
            if [ ! -d "/home/ec2-user/app" ]; then
              echo "📂 Creating /home/ec2-user/app directory..."
              mkdir -p /home/ec2-user/app
            fi

            echo "Changing to project directory..."
            cd /home/ec2-user/app || { echo "❌ Failed to enter /home/ec2-user/app"; exit 1; }

            echo "Stopping existing containers..."
            docker-compose down || { echo "Failed to stop containers"; exit 1; }

            echo "Pulling latest images..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest || { echo "Failed to pull createpost image"; exit 1; }
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest || { echo "Failed to pull getpost image"; exit 1; }
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest || { echo "Failed to pull updatepost image"; exit 1; }
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest || { echo "Failed to pull deletepost image"; exit 1; }

            echo "Setting environment variables..."
            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            export AWS_REGION="${AWS_REGION}"
            export DYNAMODB_TABLE="${DYNAMODB_TABLE}"
            export S3_BUCKET="${S3_BUCKET}"

            echo "Restarting services..."
            docker-compose up -d || { echo "Failed to start services"; exit 1; }
          EOF