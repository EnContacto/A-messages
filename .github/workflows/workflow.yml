name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push CreatePost Image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest ./createPost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest

      - name: Build and Push GetPost Image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest ./getPost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest

      - name: Build and Push UpdatePost Image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest ./updatePost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest

      - name: Build and Push DeletePost Image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest ./deletePost
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

  deploy_ec2:
    name: Deploy on EC2
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Deploy Docker Containers on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e
            
            echo "üîç Verificando instalaci√≥n de Docker..."
            if ! command -v docker &> /dev/null; then
              echo "‚öôÔ∏è Instalando Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ec2-user
              echo "‚úÖ Docker instalado correctamente."
            else
              echo "‚úÖ Docker ya est√° instalado."
            fi

            echo "üõ†Ô∏è Configurando permisos de Docker..."
            sudo systemctl restart docker
            sudo usermod -aG docker ec2-user
            newgrp docker

            echo "üìå Configurando Docker para ejecutarse en reinicios..."
            sudo systemctl enable docker.service
            sudo systemctl enable containerd.service

            echo "üõë Deteniendo y eliminando contenedores existentes si est√°n en ejecuci√≥n..."
            RUNNING_CONTAINERS=$(docker ps -q)
            if [ ! -z "$RUNNING_CONTAINERS" ]; then
              docker stop $RUNNING_CONTAINERS
              docker rm $RUNNING_CONTAINERS
            fi

            echo "‚¨áÔ∏è Descargando las √∫ltimas im√°genes de Docker..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

            echo "üîê Configurando variables de entorno persistentes..."
            echo "export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'" | sudo tee -a /etc/environment
            echo "export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'" | sudo tee -a /etc/environment
            echo "export AWS_REGION='us-east-1'" | sudo tee -a /etc/environment
            echo "export DYNAMODB_TABLE='PostsTable'" | sudo tee -a /etc/environment
            echo "export S3_BUCKET='distribuidabucketsocial'" | sudo tee -a /etc/environment

            source /etc/environment

            echo "‚úÖ Verificando variables de entorno..."
            env | grep AWS_

            echo "üöÄ Iniciando contenedores con las √∫ltimas im√°genes..."
            docker run -d -p 3001:3000 --name createpost \
              --restart always \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -e DYNAMODB_TABLE="$DYNAMODB_TABLE" \
              -e S3_BUCKET="$S3_BUCKET" \
              ${{ secrets.DOCKERHUB_USERNAME }}/app:createpost-latest

            docker run -d -p 3002:3000 --name deletepost \
              --restart always \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -e DYNAMODB_TABLE="$DYNAMODB_TABLE" \
              -e S3_BUCKET="$S3_BUCKET" \
              ${{ secrets.DOCKERHUB_USERNAME }}/app:deletepost-latest

            docker run -d -p 3003:3000 --name getpost \
              --restart always \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -e DYNAMODB_TABLE="$DYNAMODB_TABLE" \
              -e S3_BUCKET="$S3_BUCKET" \
              ${{ secrets.DOCKERHUB_USERNAME }}/app:getpost-latest

            docker run -d -p 3004:3000 --name updatepost \
              --restart always \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -e DYNAMODB_TABLE="$DYNAMODB_TABLE" \
              -e S3_BUCKET="$S3_BUCKET" \
              ${{ secrets.DOCKERHUB_USERNAME }}/app:updatepost-latest

            echo "‚úÖ Despliegue completado exitosamente!"
          EOF
